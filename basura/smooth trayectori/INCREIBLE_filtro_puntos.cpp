#include <opencv2/opencv.hpp>
#include <vector>
#include <cmath>
#include <chrono>

struct Punto
{
    int x, y;
};

void dibujarTrayectoria(cv::Mat &imagen, const std::vector<Punto> &puntos, cv::Scalar color, int grosor)
{
    for (size_t i = 1; i < puntos.size(); ++i)
    {
        cv::line(imagen, cv::Point(puntos[i - 1].x * 5, 500 - puntos[i - 1].y * 5),
                 cv::Point(puntos[i].x * 5, 500 - puntos[i].y * 5), color, grosor);
    }
}

std::vector<Punto> filtrarPuntosCercanos(const std::vector<Punto>& puntos, int distancia) {
    if (puntos.empty()) return {};

    // Ordenar los puntos por coordenada X y luego Y
    std::vector<Punto> puntosOrdenados = puntos;
    // std::sort(puntosOrdenados.begin(), puntosOrdenados.end(), [](const Punto& a, const Punto& b) {
    //     return (a.x < b.x) || (a.x == b.x && a.y < b.y);
    // });

    std::vector<Punto> filtrados;
    filtrados.push_back(puntosOrdenados[0]);

    for (size_t i = 1; i < puntosOrdenados.size(); ++i) {
        const Punto& ultimo = filtrados.back();
        const Punto& actual = puntosOrdenados[i];

        // Si la diferencia en x e y es mayor a la distancia, se agrega el punto
        if (std::abs(actual.x - ultimo.x) >= distancia || std::abs(actual.y - ultimo.y) >= distancia) {
            filtrados.push_back(actual);
        }
    }
    filtrados.push_back(puntos.back());

    return filtrados;
}

double distancia(const Punto& p1, const Punto& p2) {
    return std::sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

// Función para crear un punto intermedio a una distancia específica
Punto puntoIntermedio(const Punto& p1, const Punto& p2, double distanciaObjetivo) {
    double distTotal = distancia(p1, p2);
    if (distTotal < 1e-6) return p1; // Evitar divisiones por cero
    double t = distanciaObjetivo / distTotal;
    return {static_cast<int>(p1.x + t * (p2.x - p1.x)), static_cast<int>(p1.y + t * (p2.y - p1.y))};
}

// Función para suavizar giros de 90° eliminando la esquina y agregando puntos intermedios
std::vector<Punto> suavizarTrayectoria(const std::vector<Punto>& puntos, double distanciaSuavizado = 2.0) {
    if (puntos.size() < 3) return puntos; // No hay giros que suavizar con menos de 3 puntos

    std::vector<Punto> resultado;
    resultado.push_back(puntos[0]); // Primer punto siempre se mantiene

    for (size_t i = 1; i < puntos.size() - 1; ++i) {
        Punto A = puntos[i - 1];
        Punto B = puntos[i];
        Punto C = puntos[i + 1];

        // Crear puntos intermedios a distancia "distanciaSuavizado"
        Punto P1 = puntoIntermedio(A, B, distanciaSuavizado);
        Punto P2 = puntoIntermedio(C, B, distanciaSuavizado);

        // Agregar los puntos intermedios y saltar B (eliminamos la esquina)
        resultado.push_back(P1);
        resultado.push_back(P2);
    }

    resultado.push_back(puntos.back()); // Último punto siempre se mantiene
    return resultado;
}



int main()
{
    std::vector<Punto> puntosOriginales = {
        {98, 42}, {98, 42}, {98, 41}, {98, 41}, {98, 40}, {97, 40}, {97, 40}, {97, 39}, {97, 39}, {97, 39}, {97, 38}, {97, 38}, {97, 37}, {97, 37}, {97, 37}, {97, 36}, {97, 36}, {97, 36}, {97, 36}, {97, 35}, {97, 35}, {97, 35}, {97, 35}, {97, 35}, {97, 34}, {97, 34}, {97, 34}, {97, 34}, {97, 34}, {97, 34}, {97, 33}, {97, 33}, {97, 33}, {97, 33}, {97, 33}, {97, 33}, {97, 32}, {97, 32}, {97, 32}, {97, 32}, {97, 31}, {97, 31}, {97, 31}, {97, 31}, {96, 31}, {96, 30}, {96, 30}, {96, 30}, {96, 30}, {96, 30}, {96, 30}, {96, 29}, {96, 29}, {96, 29}, {96, 29}, {96, 28}, {96, 28}, {96, 28}, {96, 28}, {96, 28}, {96, 28}, {96, 28}, {96, 27}, {96, 27}, {96, 27}, {96, 27}, {96, 27}, {96, 27}, {96, 27}, {96, 26}, {95, 26}, {95, 26}, {95, 26}, {95, 26}, {94, 26}, {94, 26}, {94, 26}, {94, 26}, {93, 26}, {93, 26}, {93, 25}, {92, 25}, {92, 25}, {92, 25}, {92, 25}, {92, 25}, {91, 25}, {91, 25}, {91, 25}, {91, 25}, {90, 25}, {90, 25}, {90, 25}, {90, 25}, {89, 25}, {89, 25}, {89, 25}, {89, 25}, {89, 25}, {88, 25}, {88, 25}, {88, 25}, {88, 25}, {87, 25}, {87, 25}, {87, 25}, {87, 25}, {87, 25}, {86, 25}, {86, 25}, {86, 25}, {86, 25}, {85, 25}, {85, 25}, {85, 25}, {85, 25}, {85, 25}, {84, 25}, {84, 25}, {84, 25}, {84, 25}, {84, 25}, {83, 25}, {83, 25}, {83, 25}, {82, 25}, {82, 25}, {82, 25}, {81, 25}, {81, 25}, {81, 25}, {80, 25}, {80, 25}, {80, 25}, {80, 25}, {80, 25}, {79, 25}, {79, 25}, {79, 25}, {79, 26}, {79, 26}, {78, 26}, {78, 26}, {78, 26}, {77, 26}, {77, 26}, {77, 26}, {76, 26}, {76, 26}, {75, 26}, {74, 26}, {74, 26}, {74, 26}, {73, 27}, {73, 27}, {73, 27}, {72, 27}, {71, 27}, {70, 27}, {70, 27}, {69, 27}, {68, 27}, {67, 27}, {67, 28}, {67, 28}, {66, 28}, {66, 28}, {66, 28}, {65, 28}, {65, 28}, {64, 28}, {64, 28}, {63, 28}, {63, 28}, {62, 28}, {62, 28}, {61, 28}, {61, 28}, {61, 28}, {60, 28}, {60, 28}, {60, 28}, {59, 28}, {59, 28}, {59, 28}, {59, 28}, {58, 29}, {58, 29}, {57, 29}, {57, 29}, {57, 29}, {56, 29}, {56, 29}, {56, 29}, {55, 29}, {55, 29}, {55, 29}, {54, 29}, {54, 29}, {54, 29}, {54, 29}, {53, 29}, {53, 29}, {53, 29}, {53, 29}, {53, 29}, {53, 29}, {52, 29}, {52, 29}, {52, 29}, {52, 29}, {51, 29}, {51, 29}, {51, 29}, {51, 29}, {51, 29}, {50, 29}, {50, 29}, {50, 29}, {50, 29}, {50, 29}, {50, 29}, {49, 29}, {49, 29}, {49, 29}, {49, 29}, {49, 29}, {48, 29}, {48, 29}, {48, 29}, {48, 29}, {48, 29}, {47, 29}, {47, 29}, {47, 29}, {46, 29}, {46, 29}, {46, 29}, {45, 29}, {45, 29}, {45, 29}, {45, 29}, {45, 29}, {44, 29}, {44, 29}, {44, 29}, {44, 29}, {43, 29}, {43, 29}, {43, 29}, {43, 29}, {42, 29}, {42, 29}, {42, 29}, {42, 29}, {41, 29}, {41, 29}, {41, 29}, {41, 29}, {40, 29}, {40, 29}, {40, 29}, {40, 29}, {39, 29}, {39, 29}, {39, 29}, {39, 29}, {38, 29}, {38, 29}, {38, 29}, {38, 29}, {37, 29}, {37, 29}, {37, 29}, {37, 29}, {37, 29}, {36, 29}, {36, 29}, {36, 29}, {36, 29}, {35, 29}, {35, 29}, {35, 29}, {34, 29}, {34, 29}, {34, 29}, {33, 29}, {33, 29}, {33, 29}, {33, 29}, {33, 29}, {33, 30}, {33, 30}, {33, 30}, {33, 31}, {33, 31}, {33, 31}, {33, 32}, {33, 32}, {33, 32}, {33, 33}, {33, 33}, {33, 33}, {33, 34}, {33, 34}, {33, 34}, {33, 34}, {33, 35}, {33, 35}, {33, 35}, {33, 35}, {33, 35}, {33, 36}, {33, 36}, {33, 37}, {33, 37}, {33, 37}, {33, 37}, {33, 38}, {33, 38}, {33, 38}, {33, 39}, {33, 39}, {33, 39}, {33, 39}, {33, 39}, {33, 40}, {33, 40}, {33, 40}, {33, 40}, {33, 41}, {33, 41}, {33, 41}, {33, 41}, {33, 42}, {33, 42}, {33, 43}, {33, 43}, {33, 43}, {33, 44}, {33, 44}, {33, 44}, {33, 45}, {33, 45}, {33, 45}, {33, 45}, {33, 46}, {33, 46}, {32, 47}, {32, 47}, {32, 47}, {32, 48}, {32, 48}, {32, 49}, {32, 49}, {32, 49}, {32, 50}, {32, 50}, {32, 50}, {32, 50}, {32, 50}, {32, 51}, {32, 51}, {32, 51}, {32, 51}, {32, 52}, {32, 52}, {32, 52}, {32, 52}, {32, 53}, {32, 53}, {32, 54}, {32, 54}, {32, 54}, {32, 55}, {32, 55}, {32, 56}, {32, 56}, {32, 56}, {32, 56}, {32, 57}, {32, 57}, {32, 57}, {32, 57}, {32, 57}, {32, 58}, {32, 58}, {32, 58}, {32, 59}, {32, 59}, {32, 59}, {32, 59}, {32, 60}, {32, 60}, {32, 60}, {32, 61}, {32, 61}, {32, 61}, {32, 61}, {32, 62}, {32, 62}, {32, 62}, {32, 62}, {32, 63}, {32, 63}, {32, 63}, {32, 63}, {32, 63}, {32, 64}, {32, 64}, {32, 64}, {32, 65}, {32, 65}, {32, 65}, {32, 66}, {32, 66}, {32, 66}, {32, 66}, {32, 67}, {32, 67}, {32, 68}, {32, 69}, {32, 69}, {32, 70}, {32, 70}, {32, 71}, {32, 71}, {32, 72}, {32, 72}, {32, 73}, {32, 73}, {32, 73}, {32, 74}, {32, 74}, {32, 75}, {33, 75}, {33, 75}, {33, 76}, {33, 76}, {33, 77}, {33, 77}, {33, 77}, {33, 78}, {33, 78}, {33, 78}, {33, 78}, {33, 78}, {33, 78}, {33, 79}, {33, 79}, {33, 79}, {33, 79}, {33, 80}, {33, 80}, {33, 80}, {33, 80}, {33, 80}, {33, 81}, {33, 81}, {33, 81}, {33, 81}, {33, 82}, {33, 82}, {33, 82}, {33, 82}, {33, 82}, {33, 83}, {33, 83}, {33, 83}, {33, 83}, {33, 83}, {33, 84}, {33, 84}, {33, 84}, {33, 84}, {33, 84}, {33, 85}, {33, 85}, {33, 85}, {34, 85}, {34, 85}, {34, 85}, {34, 85}, {35, 87}, {35, 87}, {35, 87}, {35, 87}, {35, 87}, {36, 87}, {36, 87}, {36, 87}, {36, 87}, {36, 87}, {37, 87}, {37, 87}, {37, 87}, {37, 87}, {37, 87}, {37, 87}, {38, 87}, {38, 88}, {38, 88}, {38, 88}, {38, 88}, {38, 88}, {39, 88}, {39, 88}, {39, 88}, {39, 88}, {39, 88}, {39, 89}, {39, 89}, {39, 89}, {40, 89}, {40, 89}, {40, 89}, {40, 89}, {40, 89}, {40, 89}, {41, 89}, {41, 90}, {41, 90}, {41, 90}, {41, 90}, {42, 90}, {42, 90}, {42, 90}, {42, 90}, {42, 90}, {42, 90}, {43, 90}, {43, 90}, {43, 90}, {43, 90}, {43, 90}, {44, 90}, {44, 90}, {44, 90}, {44, 90}, {45, 90}, {45, 90}, {45, 91}, {45, 91}, {45, 91}, {45, 91}, {46, 91}, {46, 91}, {46, 91}, {46, 91}, {46, 91}, {46, 91}, {47, 91}, {47, 91}, {47, 91}, {47, 91}, {48, 91}, {48, 91}, {48, 91}, {49, 91}, {49, 91}, {50, 91}, {50, 91}, {50, 91}, {50, 90}, {51, 90}, {51, 90}, {51, 90}, {51, 90}, {52, 90}, {52, 90}, {52, 90}, {52, 90}, {52, 90}, {53, 90}, {53, 90}, {53, 90}, {53, 90}, {54, 90}, {54, 90}, {54, 90}, {54, 90}, {55, 90}, {55, 90}, {55, 90}, {55, 90}, {56, 90}, {56, 90}, {57, 90}, {57, 90}, {57, 90}, {57, 90}, {57, 90}, {58, 90}, {58, 90}, {58, 89}, {58, 89}, {58, 89}, {59, 89}, {59, 89}, {59, 89}, {59, 89}, {60, 89}, {60, 89}, {60, 89}, {60, 89}, {60, 89}, {61, 89}, {61, 89}, {61, 89}, {61, 89}, {61, 89}, {62, 89}, {62, 89}, {62, 89}, {62, 89}, {62, 89}, {63, 89}, {63, 89}, {63, 89}, {63, 90}, {64, 90}, {64, 90}, {64, 90}, {64, 90}, {65, 90}, {65, 90}, {65, 90}, {65, 90}, {65, 90}, {66, 90}, {66, 90}, {66, 90}, {67, 90}, {67, 90}, {67, 90}, {67, 90}, {68, 90}, {68, 90}, {68, 90}, {68, 90}, {68, 90}, {69, 90}, {69, 90}, {69, 90}, {70, 90}, {70, 90}, {70, 90}, {71, 90}, {71, 90}, {72, 90}, {72, 90}, {73, 90}, {73, 90}, {74, 90}, {74, 90}, {74, 90}, {75, 90}, {75, 90}, {75, 90}, {76, 90}, {76, 90}, {77, 90}, {77, 90}, {78, 90}, {78, 90}, {79, 90}, {79, 90}, {80, 90}, {80, 89}, {80, 89}, {81, 89}, {81, 89}, {81, 89}, {82, 89}, {82, 89}, {82, 89}, {82, 89}, {82, 89}, {83, 89}, {83, 89}, {83, 89}, {84, 89}, {84, 89}, {84, 89}, {84, 89}, {85, 89}, {85, 89}, {85, 89}, {86, 89}, {86, 89}, {86, 89}, {87, 89}, {87, 89}, {87, 89}, {87, 89}, {88, 89}, {88, 89}, {88, 89}, {89, 89}, {89, 89}, {89, 89}, {89, 89}, {90, 89}, {90, 89}, {91, 89}, {91, 89}, {92, 89}, {92, 89}, {92, 90}, {92, 90}, {93, 90}, {93, 90}, {93, 90}, {93, 90}, {93, 90}, {94, 90}, {94, 90}, {94, 90}, {94, 90}, {94, 90}, {94, 90}, {95, 90}, {95, 90}, {95, 90}, {95, 90}, {96, 90}, {96, 90}, {96, 90}, {96, 90}, {96, 90}, {96, 90}, {97, 90}, {97, 90}, {97, 90}, {97, 90}, {97, 90}, {98, 90}, {98, 90}, {98, 90}, {98, 90}, {98, 90}, {98, 90}, {98, 90}, {98, 89}, {98, 88}, {98, 87}, {98, 86}, {98, 85}, {98, 85}, {98, 84}, {98, 84}, {98, 83}, {98, 83}, {98, 83}, {98, 83}, {98, 82}, {98, 82}, {98, 82}, {98, 81}, {98, 81}, {98, 81}, {98, 81}, {98, 80}, {98, 80}, {98, 80}, {98, 80}, {98, 79}, {98, 79}, {98, 79}, {98, 78}, {98, 78}, {98, 78}, {98, 78}, {98, 78}, {98, 77}, {98, 77}, {98, 77}, {98, 76}, {98, 76}, {98, 76}, {98, 75}, {98, 75}, {98, 74}, {98, 74}, {98, 74}, {98, 73}, {98, 73}, {98, 73}, {98, 73}, {98, 73}, {98, 73}, {98, 72}, {98, 72}, {98, 72}, {98, 71}, {98, 71}, {98, 71}, {98, 71}, {98, 71}, {97, 71}, {97, 71}, {97, 71}, {97, 71}, {96, 71}, {96, 71}, {96, 71}, {96, 71}, {96, 71}, {95, 71}, {95, 71}, {95, 71}, {95, 71}, {95, 71}, {94, 71}, {94, 71}, {94, 71}, {94, 71}, {94, 71}, {93, 71}, {93, 71}, {93, 71}, {93, 70}, {92, 70}, {92, 70}, {92, 70}, {92, 70}, {91, 70}, {91, 70}, {91, 70}, {91, 70}, {90, 70}, {90, 70}, {89, 70}, {89, 70}, {89, 70}, {88, 70}, {88, 70}, {88, 70}, {87, 70}, {87, 70}, {86, 70}, {86, 70}, {86, 70}, {85, 70}, {85, 70}, {84, 70}, {84, 70}, {84, 70}, {83, 70}, {83, 70}, {82, 70}, {82, 70}, {82, 70}, {81, 70}, {81, 70}, {80, 70}, {80, 70}, {80, 70}, {79, 70}, {79, 70}, {79, 70}, {79, 70}, {78, 70}, {78, 70}, {77, 70}, {77, 70}, {76, 70}, {76, 70}, {76, 70}, {76, 70}, {76, 71}, {75, 71}, {75, 71}, {75, 71}, {75, 71}, {74, 71}, {74, 71}, {74, 71}, {73, 71}, {73, 71}, {72, 71}, {72, 71}, {72, 71}, {72, 71}, {72, 71}, {71, 71}, {71, 71}, {71, 71}, {70, 71}, {70, 71}, {70, 71}, {70, 71}, {69, 71}, {69, 71}, {68, 71}, {68, 71}, {67, 71}, {67, 71}, {67, 71}, {67, 71}, {66, 71}, {66, 71}, {65, 71}, {65, 71}, {65, 71}, {64, 71}, {64, 71}, {63, 71}, {63, 71}, {63, 71}, {63, 71}, {62, 71}, {62, 71}, {62, 71}, {61, 71}, {61, 71}, {61, 71}, {60, 71}, {60, 71}, {60, 71}, {60, 71}, {59, 71}, {59, 71}, {59, 71}, {58, 71}, {58, 71}, {58, 71}, {58, 71}, {57, 71}, {57, 71}, {57, 71}, {57, 71}, {56, 71}, {56, 71}, {56, 71}, {56, 71}, {56, 71}, {55, 71}, {55, 71}, {55, 71}, {55, 71}, {55, 71}, {55, 71}, {54, 71}, {54, 71}, {54, 71}, {54, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 71}, {53, 70}, {53, 70}, {53, 70}, {53, 69}, {53, 69}, {53, 69}, {53, 69}, {53, 68}, {53, 68}, {53, 67}, {53, 67}, {53, 66}, {53, 66}, {53, 66}, {53, 65}, {53, 65}, {53, 64}, {53, 64}, {53, 64}, {53, 64}, {53, 63}, {53, 63}, {53, 62}, {53, 62}, {53, 62}, {53, 61}, {53, 61}, {53, 61}, {53, 60}, {53, 60}, {53, 60}, {53, 60}, {53, 59}, {53, 59}, {53, 59}, {53, 59}, {53, 59}, {53, 58}, {53, 58}, {53, 58}, {53, 58}, {53, 57}, {53, 57}, {53, 57}, {53, 57}, {53, 56}, {53, 56}, {53, 56}, {53, 55}, {53, 55}, {53, 55}, {53, 54}, {53, 54}, {53, 54}, {53, 53}, {53, 53}, {53, 52}, {53, 52}, {53, 52}, {53, 52}, {53, 52}, {53, 52}, {53, 52}, {53, 51}, {53, 51}, {53, 51}, {53, 51}, {53, 50}, {53, 50}, {53, 49}, {53, 49}, {53, 49}, {53, 49}, {53, 49}, {53, 49}, {54, 49}, {54, 49}, {54, 49}, {54, 49}, {55, 49}, {55, 49}, {55, 49}, {55, 49}, {55, 49}, {55, 49}, {56, 49}, {56, 49}, {56, 49}, {56, 49}, {56, 49}, {57, 49}, {57, 49}, {57, 49}, {57, 50}, {57, 50}, {58, 50}, {58, 50}, {58, 50}, {58, 50}, {59, 50}, {59, 50}, {59, 50}, {59, 50}, {60, 50}, {60, 50}, {60, 50}, {60, 50}, {61, 50}, {61, 50}, {61, 50}, {61, 50}, {62, 50}, {62, 50}, {62, 50}, {62, 50}, {63, 50}, {63, 50}, {63, 50}, {63, 50}, {63, 50}, {64, 50}, {64, 50}, {65, 50}, {65, 50}, {65, 50}, {65, 50}, {66, 50}, {66, 50}, {67, 50}, {67, 50}, {67, 50}, {68, 50}, {68, 50}, {69, 50}, {69, 50}, {69, 50}, {70, 50}, {70, 50}, {70, 50}, {71, 49}, {72, 49}, {72, 49}, {72, 49}, {73, 49}, {73, 49}, {74, 49}, {74, 49}, {74, 49}, {75, 49}, {75, 49}, {75, 49}, {76, 49}, {76, 49}, {77, 49}, {77, 49}, {77, 49}, {77, 48}, {77, 48}, {78, 48}, {78, 48}, {78, 48}, {78, 48}, {79, 48}, {79, 48}, {79, 48}, {79, 48}, {80, 48}, {80, 48}, {80, 48}, {81, 48}, {81, 48}, {81, 48}, {81, 48}, {82, 48}, {82, 48}, {82, 48}, {82, 48}, {83, 48}, {83, 48}, {83, 48}, {84, 48}, {84, 48}, {84, 48}, {85, 48}, {87, 48}};


    
    double distancia = 5; // Ajusta para mantener más o menos detalles
    auto inicio1 = std::chrono::high_resolution_clock::now();
    std::vector<Punto> reduccion = filtrarPuntosCercanos(suavizarTrayectoria(filtrarPuntosCercanos(puntosOriginales, 6), 3), 4);
    auto fin1 = std::chrono::high_resolution_clock::now();
    auto duracion1 = std::chrono::duration<double, std::milli>(fin1 - inicio1).count();
    
    std::cout << "Tiempo de reduccion: " << duracion1 << " ms" << std::endl;

    // Medir el tiempo de la segunda operación
    auto inicio2 = std::chrono::high_resolution_clock::now();
    std::vector<Punto> suavizados = filtrarPuntosCercanos(suavizarTrayectoria(filtrarPuntosCercanos(puntosOriginales, 6), 3), 3);
    auto fin2 = std::chrono::high_resolution_clock::now();
    auto duracion2 = std::chrono::duration<double, std::milli>(fin2 - inicio2).count();

    std::cout << "Tiempo de suavizado: " << duracion2 << " ms" << std::endl;

    cv::Mat imagenOriginal = cv::Mat::zeros(500, 500, CV_8UC3);
    // cv::Mat imagenReducidos = cv::Mat::zeros(500, 500, CV_8UC3);
    cv::Mat recuccion = cv::Mat::zeros(500, 500, CV_8UC3);
    
    dibujarTrayectoria(imagenOriginal, puntosOriginales, cv::Scalar(0, 0, 255), 2);      // Rojo (original)
    dibujarTrayectoria(imagenOriginal, suavizados, cv::Scalar(0, 255, 0), 2);      // Verde (reducción adaptativa)
    dibujarTrayectoria(recuccion, reduccion, cv::Scalar(0, 255, 255), 2);        // Amarillo (Douglas-Peucker)
    
    cv::imshow("Trayectoria Original", imagenOriginal);
    // cv::imshow("Suavizados", imagenReducidos);
    cv::imshow("Reduccion", recuccion);
    
    cv::waitKey(0); // Esperar hasta que se presione una tecla

    return 0;
}
